{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUBOMMAS\\\\Downloads\\\\WeatherApplication\\\\src\\\\components\\\\NavBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { cities, getCurrentCity } from \"../constants\";\nimport styles from \"./NavBar.module.css\";\n//import CustomBar from \"./CutomBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet start = [];\nfor (let i = 0; i < 10; i++) {\n  //console.log(\"PUSHED\", cities[i])\n  start.push(cities[i]);\n}\nfunction NavBar() {\n  _s();\n  const [customCities, setCutomCities] = useState([...start]);\n  const cityRef = useRef(null);\n  function getCurrentCity() {\n    navigator.geolocation.getCurrentPosition(position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      fetch(\"https://api.weatherapi.com/v1/current.json?key=dc27acb7394c462a8a6133905240105&q=\".concat(latitude, \",\").concat(longitude)) // Replace with your OpenWeatherMap API key\n      .then(response => response.json()).then(data => {\n        console.log(\"Current nearby city:\", data.location.name);\n      }).catch(error => console.error(\"Error fetching city:\", error));\n    }, error => {\n      console.error(\"Error getting geolocation:\", error);\n    });\n  }\n\n  //console.log(\"CURRENT CITIES:: \",customCities[0]);\n  const size = cities.length;\n  //console.log(customCities)\n  const nextHandler = () => {\n    //console.log(\"CURRENT CITIES:: \",customCities);\n    const firstElement = cities.findIndex(name => name === customCities[0]);\n    const lastElement = cities.findIndex(name => name === customCities[customCities.length - 1]);\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\n    //let range = Math.floor(Math.random()*2);\n    let newList = cities.slice(firstElement + 1, lastElement + 2);\n    setCutomCities(newList);\n  };\n  const onClickHandler = event => {\n    console.log(event.target.name);\n  };\n  useEffect(() => {\n    const geolocation = getCurrentCity();\n    console.log(geolocation);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"city-container\"],\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      children: \"<<\"\n    }, \"prev\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 10\n    }, this), customCities && customCities.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClickHandler,\n      className: styles[\"city-button\"],\n      name: name,\n      children: name\n    }, \"city\".concat(index), false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"spread\",\n      children: \"...\"\n    }, \"spread\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: size\n    }, \"size\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextHandler,\n      children: \">>\"\n    }, \"next\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(NavBar, \"ECof3h8T4FehoHfjdumfafNs3QM=\");\n_c = NavBar;\nexport default NavBar;\nvar _c;\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","cities","getCurrentCity","styles","jsxDEV","_jsxDEV","start","i","push","NavBar","_s","customCities","setCutomCities","cityRef","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","fetch","concat","then","response","json","data","console","log","location","name","catch","error","size","length","nextHandler","firstElement","findIndex","lastElement","newList","slice","onClickHandler","event","target","className","children","disabled","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SUBOMMAS/Downloads/WeatherApplication/src/components/NavBar.jsx"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport {cities, getCurrentCity} from \"../constants\";\r\nimport styles from \"./NavBar.module.css\";\r\n//import CustomBar from \"./CutomBar\";\r\n\r\nlet start =[];\r\nfor(let i= 0;i<10;i++){\r\n    //console.log(\"PUSHED\", cities[i])\r\n   start.push(cities[i]);\r\n }\r\n\r\nfunction NavBar(){\r\n    const [customCities, setCutomCities] = useState([...start]);\r\n    const cityRef= useRef(null);\r\n    function getCurrentCity(){\r\n        navigator.geolocation.getCurrentPosition((position)=>{\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n        fetch(`https://api.weatherapi.com/v1/current.json?key=dc27acb7394c462a8a6133905240105&q=${latitude},${longitude}`) // Replace with your OpenWeatherMap API key\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          console.log(\"Current nearby city:\", data.location.name);\r\n        })\r\n        .catch(error => console.error(\"Error fetching city:\", error));\r\n        }, (error) => {\r\n        console.error(\"Error getting geolocation:\", error);\r\n        })\r\n      }\r\n\r\n\r\n    //console.log(\"CURRENT CITIES:: \",customCities[0]);\r\n    const size = cities.length;\r\n    //console.log(customCities)\r\n   const nextHandler =()=>{\r\n    //console.log(\"CURRENT CITIES:: \",customCities);\r\n    const firstElement =  cities.findIndex((name)=>name === customCities[0]);\r\n    const lastElement =  cities.findIndex((name)=>name === customCities[customCities.length-1]);\r\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\r\n    //let range = Math.floor(Math.random()*2);\r\n    let newList = cities.slice(firstElement+1, lastElement+2)\r\n    setCutomCities(newList);\r\n   }\r\n   const onClickHandler=(event)=>{\r\n       console.log(event.target.name);\r\n   }\r\n\r\n   useEffect(()=>{\r\n    const geolocation = getCurrentCity();\r\n    console.log(geolocation)\r\n   },[])\r\n\r\n    return (\r\n        <div className={styles[\"city-container\"]}>\r\n         <button key={\"prev\"} disabled>{\"<<\"}</button>\r\n         { customCities && customCities.map((name,index)=>(\r\n                \r\n                <button key={`city${index}`} onClick={onClickHandler} className={styles[\"city-button\"]} name={name}>{name}</button>\r\n            ))}\r\n          <button name=\"spread\" key=\"spread\">...</button>\r\n         <button key=\"size\">{size}</button> \r\n         <button onClick={nextHandler} key=\"next\">{\">>\"}</button>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default NavBar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AACxD,SAAQC,MAAM,EAAEC,cAAc,QAAO,cAAc;AACnD,OAAOC,MAAM,MAAM,qBAAqB;AACxC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,IAAIC,KAAK,GAAE,EAAE;AACb,KAAI,IAAIC,CAAC,GAAE,CAAC,EAACA,CAAC,GAAC,EAAE,EAACA,CAAC,EAAE,EAAC;EAClB;EACDD,KAAK,CAACE,IAAI,CAACP,MAAM,CAACM,CAAC,CAAC,CAAC;AACvB;AAED,SAASE,MAAMA,CAAA,EAAE;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,GAAGQ,KAAK,CAAC,CAAC;EAC3D,MAAMO,OAAO,GAAEb,MAAM,CAAC,IAAI,CAAC;EAC3B,SAASE,cAAcA,CAAA,EAAE;IACrBY,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAG;MACrD,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;MACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;MAC3CC,KAAK,qFAAAC,MAAA,CAAqFJ,QAAQ,OAAAI,MAAA,CAAIF,SAAS,CAAE,CAAC,CAAC;MAAA,CAClHG,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;QACZC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,IAAI,CAACG,QAAQ,CAACC,IAAI,CAAC;MACzD,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;IAC7D,CAAC,EAAGA,KAAK,IAAK;MACdL,OAAO,CAACK,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;EACJ;;EAGF;EACA,MAAMC,IAAI,GAAGhC,MAAM,CAACiC,MAAM;EAC1B;EACD,MAAMC,WAAW,GAAEA,CAAA,KAAI;IACtB;IACA,MAAMC,YAAY,GAAInC,MAAM,CAACoC,SAAS,CAAEP,IAAI,IAAGA,IAAI,KAAKnB,YAAY,CAAC,CAAC,CAAC,CAAC;IACxE,MAAM2B,WAAW,GAAIrC,MAAM,CAACoC,SAAS,CAAEP,IAAI,IAAGA,IAAI,KAAKnB,YAAY,CAACA,YAAY,CAACuB,MAAM,GAAC,CAAC,CAAC,CAAC;IAC3F;IACA;IACA,IAAIK,OAAO,GAAGtC,MAAM,CAACuC,KAAK,CAACJ,YAAY,GAAC,CAAC,EAAEE,WAAW,GAAC,CAAC,CAAC;IACzD1B,cAAc,CAAC2B,OAAO,CAAC;EACxB,CAAC;EACD,MAAME,cAAc,GAAEC,KAAK,IAAG;IAC1Bf,OAAO,CAACC,GAAG,CAACc,KAAK,CAACC,MAAM,CAACb,IAAI,CAAC;EAClC,CAAC;EAED/B,SAAS,CAAC,MAAI;IACb,MAAMgB,WAAW,GAAGb,cAAc,CAAC,CAAC;IACpCyB,OAAO,CAACC,GAAG,CAACb,WAAW,CAAC;EACzB,CAAC,EAAC,EAAE,CAAC;EAEJ,oBACIV,OAAA;IAAKuC,SAAS,EAAEzC,MAAM,CAAC,gBAAgB,CAAE;IAAA0C,QAAA,gBACxCxC,OAAA;MAAqByC,QAAQ;MAAAD,QAAA,EAAE;IAAI,GAAtB,MAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAyB,CAAC,EAC3CvC,YAAY,IAAIA,YAAY,CAACwC,GAAG,CAAC,CAACrB,IAAI,EAACsB,KAAK,kBAEvC/C,OAAA;MAA6BgD,OAAO,EAAEZ,cAAe;MAACG,SAAS,EAAEzC,MAAM,CAAC,aAAa,CAAE;MAAC2B,IAAI,EAAEA,IAAK;MAAAe,QAAA,EAAEf;IAAI,UAAAR,MAAA,CAArF8B,KAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAyF,CACrH,CAAC,eACJ7C,OAAA;MAAQyB,IAAI,EAAC,QAAQ;MAAAe,QAAA,EAAc;IAAG,GAAZ,QAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAChD7C,OAAA;MAAAwC,QAAA,EAAoBZ;IAAI,GAAZ,MAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,eAClC7C,OAAA;MAAQgD,OAAO,EAAElB,WAAY;MAAAU,QAAA,EAAa;IAAI,GAAZ,MAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAGd;AAACxC,EAAA,CArDQD,MAAM;AAAA6C,EAAA,GAAN7C,MAAM;AAsDf,eAAeA,MAAM;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}