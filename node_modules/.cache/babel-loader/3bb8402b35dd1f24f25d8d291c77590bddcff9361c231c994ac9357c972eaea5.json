{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUBOMMAS\\\\Downloads\\\\WeatherApplication\\\\src\\\\components\\\\NavBar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { cities, getCurrentCity } from \"../constants\";\nimport styles from \"./NavBar.module.css\";\n//import CustomBar from \"./CutomBar\";\nimport { CityContext } from \"../store/WeatherProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet start = [];\nfor (let i = 0; i < 10; i++) {\n  //console.log(\"PUSHED\", cities[i])\n  start.push(cities[i]);\n}\nfunction NavBar() {\n  _s();\n  const [customCities, setCutomCities] = useState([...start]);\n  const prevRef = useRef(null);\n  const context = useContext(CityContext);\n  function getCurrentCity() {\n    navigator.geolocation.getCurrentPosition(position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      fetch(\"https://api.weatherapi.com/v1/current.json?key=dc27acb7394c462a8a6133905240105&q=\".concat(latitude, \",\").concat(longitude)) // Replace with your OpenWeatherMap API key\n      .then(response => response.json()).then(data => {\n        //console.log(\"Current nearby city:\", data.location.name);\n        context.updateLocation(data.location.name);\n      }).catch(error => console.error(\"Error fetching city:\", error));\n    }, error => {\n      console.error(\"Error getting geolocation:\", error);\n    });\n  }\n  const fetchCityWeather = async () => {\n    getCurrentCity();\n    //console.log(context.currentLocation)\n  };\n\n  //console.log(\"CURRENT CITIES:: \",customCities[0]);\n  let size = cities.length;\n  //const lastElement =  cities.findIndex((name)=>name === customCities[customCities.length-1]);\n  if (customCities.length < 10) {\n    size = customCities.length;\n    console.log(size);\n  }\n  // default selection\n  const activateBar = () => {\n    const city = customCities[0];\n    document.getElementsByName(city);\n  };\n\n  //console.log(customCities)\n  const nextHandler = () => {\n    //console.log(\"CURRENT CITIES:: \",customCities);\n    const firstElement = cities.findIndex(name => name === customCities[0]);\n    const lastElement = cities.findIndex(name => name === customCities[customCities.length - 1]);\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\n    //let range = Math.floor(Math.random()*2);\n    let newList = cities.slice(firstElement + 1, lastElement + 2);\n    setCutomCities(newList);\n    if (firstElement === 1) {\n      prevRef === null || prevRef === void 0 ? void 0 : prevRef.current;\n    }\n  };\n  const prevHandler = () => {\n    const firstElement = cities.findIndex(name => name === customCities[0]);\n    const lastElement = cities.findIndex(name => name === customCities[customCities.length - 1]);\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\n    //let range = Math.floor(Math.random()*2);\n    let newList = cities.slice(firstElement - 1, lastElement - 2);\n    setCutomCities(newList);\n  };\n  const onClickHandler = event => {\n    console.log(event.target.name);\n  };\n  useEffect(() => {\n    getCurrentCity();\n    fetchCityWeather();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"city-container\"],\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      onClick: prevHandler,\n      ref: prevRef,\n      children: \"<<\"\n    }, \"prev\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 10\n    }, this), customCities && customCities.map((name, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        backgroundColor: index ? \"\" : \"green\"\n      },\n      onClick: onClickHandler,\n      className: styles[\"city-button\"],\n      name: name,\n      children: name\n    }, \"city\".concat(index), false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"spread\",\n      children: \"...\"\n    }, \"spread\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: size\n    }, \"size\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: nextHandler,\n      children: \">>\"\n    }, \"next\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n_s(NavBar, \"IT6D0nbssJfgZqF5vwGaoMmw5a4=\");\n_c = NavBar;\nexport default NavBar;\nvar _c;\n$RefreshReg$(_c, \"NavBar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","cities","getCurrentCity","styles","CityContext","jsxDEV","_jsxDEV","start","i","push","NavBar","_s","customCities","setCutomCities","prevRef","context","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","fetch","concat","then","response","json","data","updateLocation","location","name","catch","error","console","fetchCityWeather","size","length","log","activateBar","city","document","getElementsByName","nextHandler","firstElement","findIndex","lastElement","newList","slice","current","prevHandler","onClickHandler","event","target","className","children","disabled","onClick","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","index","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/SUBOMMAS/Downloads/WeatherApplication/src/components/NavBar.jsx"],"sourcesContent":["import React, {useState, useEffect, useRef, useContext} from \"react\";\r\nimport {cities, getCurrentCity} from \"../constants\";\r\nimport styles from \"./NavBar.module.css\";\r\n//import CustomBar from \"./CutomBar\";\r\nimport {CityContext} from \"../store/WeatherProvider\";\r\n\r\nlet start =[];\r\nfor(let i= 0;i<10;i++){\r\n    //console.log(\"PUSHED\", cities[i])\r\n   start.push(cities[i]);\r\n }\r\n\r\nfunction NavBar(){\r\n    const [customCities, setCutomCities] = useState([...start]);\r\n    const prevRef= useRef(null);\r\n    const context = useContext(CityContext);\r\n    \r\n    function getCurrentCity(){\r\n        navigator.geolocation.getCurrentPosition((position)=>{\r\n        const latitude = position.coords.latitude;\r\n        const longitude = position.coords.longitude;\r\n        fetch(`https://api.weatherapi.com/v1/current.json?key=dc27acb7394c462a8a6133905240105&q=${latitude},${longitude}`) // Replace with your OpenWeatherMap API key\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          //console.log(\"Current nearby city:\", data.location.name);\r\n          context.updateLocation(data.location.name);\r\n        })\r\n        .catch(error => console.error(\"Error fetching city:\", error));\r\n        }, (error) => {\r\n        console.error(\"Error getting geolocation:\", error);\r\n        })\r\n      }\r\n\r\n    const fetchCityWeather=async ()=>{\r\n        getCurrentCity()\r\n       //console.log(context.currentLocation)\r\n    }\r\n\r\n    //console.log(\"CURRENT CITIES:: \",customCities[0]);\r\n    let size = cities.length;\r\n    //const lastElement =  cities.findIndex((name)=>name === customCities[customCities.length-1]);\r\n    if(customCities.length <10){\r\n     size = customCities.length;\r\n     console.log(size)\r\n    }\r\n    // default selection\r\n    const activateBar =()=>{\r\n         const city = customCities[0];\r\n         document.getElementsByName(city);\r\n\r\n    }\r\n   \r\n    //console.log(customCities)\r\n   const nextHandler =()=>{\r\n    //console.log(\"CURRENT CITIES:: \",customCities);\r\n    const firstElement =  cities.findIndex((name)=>name === customCities[0]);\r\n    const lastElement =  cities.findIndex((name)=>name === customCities[customCities.length-1]);\r\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\r\n    //let range = Math.floor(Math.random()*2);\r\n    let newList = cities.slice(firstElement+1, lastElement+2)\r\n    setCutomCities(newList);\r\n    if( firstElement===1 ){\r\n        prevRef?.current\r\n    }\r\n   }\r\n   const prevHandler=()=>{\r\n    const firstElement =  cities.findIndex((name)=>name === customCities[0]);\r\n    const lastElement =  cities.findIndex((name)=>name === customCities[customCities.length-1]);\r\n    //console.log(\"INDEX:: \",firstElement+1, lastElement+2);\r\n    //let range = Math.floor(Math.random()*2);\r\n    let newList = cities.slice(firstElement-1, lastElement-2)\r\n    setCutomCities(newList);\r\n   }\r\n   const onClickHandler=(event)=>{\r\n       console.log(event.target.name);\r\n   }\r\n\r\n   useEffect(()=>{\r\n    getCurrentCity();\r\n    fetchCityWeather();\r\n   },[])\r\n\r\n    return (\r\n        <div className={styles[\"city-container\"]}>\r\n         <button key={\"prev\"} disabled onClick={prevHandler} ref={prevRef}>{\"<<\"}</button>\r\n         { customCities && customCities.map((name,index)=>(\r\n                \r\n                <button  style={{backgroundColor: index?\"\":\"green\"}} key={`city${index}`} onClick={onClickHandler} className={styles[\"city-button\"]} name={name}>{name}</button>\r\n            ))}\r\n          <button name=\"spread\" key=\"spread\">...</button>\r\n         <button key=\"size\">{size}</button> \r\n         <button onClick={nextHandler} key=\"next\">{\">>\"}</button>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default NavBar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}